---
description: 
globs: 
alwaysApply: true
---
# TypeScript Project Development Standards

You are an expert TypeScript developer proficient in type systems, modern JavaScript/TypeScript best practices, and functional programming. Strictly follow these coding standards to ensure type safety, maintainability, and long-term stability.

## Core Principles

- **Type Safety First**: Absolutely avoid `any` types and type assertions (`as` keyword)
- **Functional Programming**: Prefer functional programming patterns over classes
- **Explicit Type Declarations**: Every variable, function parameter, and return value should have clear type declarations
- **Interface-Driven Design**: Use interfaces and type aliases extensively for complex data structures
- **Generic Flexibility**: Leverage generics for type-safe code reuse
- **Type Guards**: Use type guards to narrow union types safely
- **Strict Mode**: Enable TypeScript strict mode for maximum type safety

## Prohibited Syntax and Patterns

### Absolutely Forbidden

```typescript
// ❌ NEVER use any type
const data: any = fetchData();

// ❌ NEVER use type assertions
const result = data as SomeType;
const element = document.getElementById("id") as HTMLElement;

// ❌ NEVER use non-null assertions
const element = document.getElementById("id")!;

// ❌ NEVER use implicit any
function processValue(value) {
  // implicit any parameter
  return value;
}
```

### Correct Alternatives

```typescript
// ✅ Use explicit types and interfaces
interface ApiResponse<TData> {
  data: TData;
  status: number;
  message: string;
}

const data: ApiResponse<UserData> = await fetchData();

// ✅ Use type guards instead of assertions
function isHTMLElement(element: Element | null): element is HTMLElement {
  return element !== null && element instanceof HTMLElement;
}

const element = document.getElementById("id");
if (isHTMLElement(element)) {
  // Safe to use element as HTMLElement
  element.style.display = "none";
}

// ✅ Use unknown for truly unknown data, then validate
function parseJson(jsonString: string): unknown {
  try {
    return JSON.parse(jsonString);
  } catch {
    return null;
  }
}

function isUserData(obj: unknown): obj is UserData {
  return (
    typeof obj === "object" &&
    obj !== null &&
    "id" in obj &&
    "name" in obj &&
    typeof (obj as UserData).id === "string" &&
    typeof (obj as UserData).name === "string"
  );
}

const parsed = parseJson(someJson);
if (isUserData(parsed)) {
  // TypeScript knows parsed is UserData
  console.log(parsed.name);
}
```

## Type System Standards

### Interfaces vs Type Aliases

```typescript
// ✅ Use interfaces for object structures
interface UserProfile {
  readonly id: string;
  username: string;
  email: string;
  roles: UserRole[];
  createdAt: Date;
  updatedAt: Date;
}

// ✅ Use type aliases for unions, primitives, and computed types
type UserRole = "admin" | "editor" | "viewer";
type HttpMethod = "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
type Status = "pending" | "success" | "failed" | "cancelled";

// ✅ Use descriptive generic parameter names
interface ApiClient<TResponse, TError = ApiError> {
  request<TRequestData>(data: TRequestData): Promise<TResponse>;
  handleError(error: TError): void;
}

interface Repository<TEntity, TCreateInput, TUpdateInput> {
  findById(id: string): Promise<TEntity | null>;
  create(input: TCreateInput): Promise<TEntity>;
  update(id: string, input: TUpdateInput): Promise<TEntity>;
  delete(id: string): Promise<void>;
}
```

### Advanced Type Guards and Narrowing

```typescript
// ✅ Custom type guards for complex validation
function isValidEmail(value: unknown): value is string {
  return typeof value === "string" && /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value);
}

function isApiError(error: unknown): error is ApiError {
  return (
    typeof error === "object" &&
    error !== null &&
    "code" in error &&
    "message" in error &&
    typeof (error as ApiError).code === "string" &&
    typeof (error as ApiError).message === "string"
  );
}

// ✅ Discriminated unions with type guards
interface LoadingState {
  type: "loading";
}

interface SuccessState {
  type: "success";
  data: UserData[];
}

interface ErrorState {
  type: "error";
  error: string;
}

type AsyncState = LoadingState | SuccessState | ErrorState;

function handleAsyncState(state: AsyncState): void {
  switch (state.type) {
    case "loading":
      // TypeScript knows this is LoadingState
      showSpinner();
      break;
    case "success":
      // TypeScript knows this is SuccessState
      displayData(state.data);
      break;
    case "error":
      // TypeScript knows this is ErrorState
      showError(state.error);
      break;
  }
}

// ✅ Use 'in' operator for object type narrowing
function processResponse(response: SuccessResponse | ErrorResponse): void {
  if ("data" in response) {
    // TypeScript knows this is SuccessResponse
    console.log(response.data);
  } else {
    // TypeScript knows this is ErrorResponse
    console.error(response.error);
  }
}
```

## Import and Export Standards

### Type-Only Imports

```typescript
// ✅ Use import type for type-only imports
import type { UserProfile, ApiResponse, CreateUserInput } from "./types";
import type { ApisixClient } from "./client";

// ✅ Regular imports for values
import { createUser, validateEmail, hashPassword } from "./utils";
import { UserService } from "./services";
import { CONFIG } from "./constants";

// ✅ Mixed imports - separate type and value imports
import { UserRepository } from "./repositories";
import type { UserRepositoryConfig } from "./repositories";

// ✅ Re-exports with explicit typing
export type { UserProfile, ApiResponse };
export { UserService, createUser };
```

### Module Structure

```typescript
// ✅ Clear export structure
// types.ts
export interface User {
  id: string;
  username: string;
  email: string;
}

export type CreateUserInput = Omit<User, "id">;
export type UpdateUserInput = Partial<CreateUserInput>;

// services.ts
import type { User, CreateUserInput, UpdateUserInput } from "./types";

export class UserService {
  async create(input: CreateUserInput): Promise<User> {
    // implementation
  }

  async update(id: string, input: UpdateUserInput): Promise<User> {
    // implementation
  }
}

// index.ts
export type { User, CreateUserInput, UpdateUserInput } from "./types";
export { UserService } from "./services";
```

## Function and Method Standards

### Function Declarations and Signatures

```typescript
// ✅ Use function declarations for top-level functions
function calculateTotal(items: CartItem[]): number {
  return items.reduce((sum, item) => sum + item.price * item.quantity, 0);
}

// ✅ Use arrow functions for simple operations and callbacks
const formatCurrency = (amount: number, currency: string = "USD"): string =>
  new Intl.NumberFormat("en-US", { style: "currency", currency }).format(
    amount
  );

// ✅ Complex parameter objects with interfaces
interface CreateOrderParams {
  customerId: string;
  items: CartItem[];
  shippingAddress: Address;
  paymentMethod: PaymentMethod;
  discountCode?: string;
}

async function createOrder(params: CreateOrderParams): Promise<Order> {
  const { customerId, items, shippingAddress, paymentMethod, discountCode } =
    params;

  // implementation
  return order;
}

// ✅ Generic functions with proper constraints
function mapArray<TInput, TOutput>(
  array: TInput[],
  mapper: (item: TInput, index: number) => TOutput
): TOutput[] {
  return array.map(mapper);
}

function filterByProperty<TObject, TKey extends keyof TObject>(
  array: TObject[],
  property: TKey,
  value: TObject[TKey]
): TObject[] {
  return array.filter((item) => item[property] === value);
}
```

### Async Function Patterns

```typescript
// ✅ Explicit Promise return types
async function fetchUserData(userId: string): Promise<UserData> {
  const response = await fetch(`/api/users/${userId}`);
  if (!response.ok) {
    throw new Error(`Failed to fetch user: ${response.statusText}`);
  }
  return response.json();
}

// ✅ Concurrent operations with Promise.all
async function loadDashboardData(userId: string): Promise<DashboardData> {
  const [user, notifications, analytics, preferences] = await Promise.all([
    fetchUser(userId),
    fetchNotifications(userId),
    fetchAnalytics(userId),
    fetchUserPreferences(userId),
  ]);

  return {
    user,
    notifications,
    analytics,
    preferences,
  };
}

// ✅ Error handling with Result pattern
type Result<TData, TError = Error> =
  | { success: true; data: TData }
  | { success: false; error: TError };

async function safeApiCall<TData>(
  operation: () => Promise<TData>
): Promise<Result<TData, ApiError>> {
  try {
    const data = await operation();
    return { success: true, data };
  } catch (error) {
    if (isApiError(error)) {
      return { success: false, error };
    }
    return {
      success: false,
      error: {
        code: "UNKNOWN_ERROR",
        message: "An unexpected error occurred",
        details: { originalError: String(error) },
      },
    };
  }
}
```

## Error Handling

### Type-Safe Error Management

```typescript
// ✅ Define comprehensive error types
interface ValidationError {
  type: "validation";
  field: string;
  message: string;
  code: string;
}

interface NetworkError {
  type: "network";
  status: number;
  message: string;
  url: string;
}

interface BusinessError {
  type: "business";
  code: string;
  message: string;
  context?: Record<string, unknown>;
}

type AppError = ValidationError | NetworkError | BusinessError;

// ✅ Error handling with proper typing
function handleError(error: AppError): void {
  switch (error.type) {
    case "validation":
      console.error(`Validation error in ${error.field}: ${error.message}`);
      break;
    case "network":
      console.error(
        `Network error ${error.status} for ${error.url}: ${error.message}`
      );
      break;
    case "business":
      console.error(`Business logic error ${error.code}: ${error.message}`);
      break;
  }
}

// ✅ Safe error parsing
function parseError(error: unknown): AppError {
  if (isValidationError(error)) return error;
  if (isNetworkError(error)) return error;
  if (isBusinessError(error)) return error;

  return {
    type: "business",
    code: "UNKNOWN",
    message: "An unexpected error occurred",
    context: { originalError: String(error) },
  };
}
```

## Collection Type Safety

### Arrays, Sets, and Maps

```typescript
// ✅ Explicit collection types
const userIds: string[] = ["user1", "user2", "user3"];
const scores: Array<number> = [95, 87, 92, 78];
const uniqueCategories: Set<string> = new Set(["tech", "design", "business"]);
const userProfiles: Map<string, UserProfile> = new Map();

// ✅ Type-safe collection operations
function processUsers(users: User[]): ProcessedUser[] {
  return users
    .filter((user): user is ActiveUser => user.status === "active")
    .map((user) => ({
      id: user.id,
      displayName: `${user.firstName} ${user.lastName}`,
      lastSeen: user.lastLoginAt || user.createdAt,
    }));
}

// ✅ Generic collection utilities
function groupBy<TItem, TKey extends string | number>(
  items: TItem[],
  keySelector: (item: TItem) => TKey
): Record<TKey, TItem[]> {
  const groups = {} as Record<TKey, TItem[]>;

  for (const item of items) {
    const key = keySelector(item);
    groups[key] = groups[key] || [];
    groups[key].push(item);
  }

  return groups;
}
```

## Advanced Type Patterns

### Utility Types and Conditional Types

```typescript
// ✅ Built-in utility types
type PartialUser = Partial<User>;
type RequiredUser = Required<User>;
type UserEmail = Pick<User, "email">;
type UserWithoutId = Omit<User, "id">;
type CreateUserInput = Pick<
  User,
  "username" | "email" | "firstName" | "lastName"
>;

// ✅ Custom utility types
type NonNullable<T> = T extends null | undefined ? never : T;
type DeepReadonly<T> = {
  readonly [P in keyof T]: T[P] extends object ? DeepReadonly<T[P]> : T[P];
};

type OptionalKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? K : never;
}[keyof T];

type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K;
}[keyof T];

// ✅ Conditional types for API responses
type ApiResponseData<T> = T extends { data: infer D } ? D : never;
type ApiResponseError<T> = T extends { error: infer E } ? E : never;

// ✅ Template literal types
type EventName<T extends string> = `on${Capitalize<T>}`;
type CssProperty = `--${string}`;
type HttpStatusCode = `${1 | 2 | 3 | 4 | 5}${string}`;
```

### Branded Types

```typescript
// ✅ Use branded types for type safety
declare const __brand: unique symbol;
type Brand<T, TBrand> = T & { [__brand]: TBrand };

type UserId = Brand<string, "UserId">;
type Email = Brand<string, "Email">;
type Timestamp = Brand<number, "Timestamp">;

// ✅ Type-safe constructor functions
function createUserId(id: string): UserId {
  if (!id || id.length === 0) {
    throw new Error("User ID cannot be empty");
  }
  return id as UserId;
}

function createEmail(email: string): Email {
  if (!isValidEmail(email)) {
    throw new Error("Invalid email format");
  }
  return email as Email;
}
```

## Code Formatting and Style

### Naming Conventions

```typescript
// ✅ Interfaces and types: PascalCase
interface UserRepository {
  findById(id: UserId): Promise<User | null>;
}

type ApiConfiguration = {
  baseUrl: string;
  timeout: number;
  retries: number;
};

// ✅ Variables and functions: camelCase
const apiClient = createApiClient();
const currentUser = getCurrentUser();

function validateUserInput(input: CreateUserInput): ValidationResult {
  return performValidation(input);
}

// ✅ Constants: SCREAMING_SNAKE_CASE
const MAX_RETRY_ATTEMPTS = 3;
const DEFAULT_TIMEOUT = 30000;

const API_ENDPOINTS = {
  USERS: "/api/users",
  ORDERS: "/api/orders",
  PRODUCTS: "/api/products",
} as const;

// ✅ File and directory names: kebab-case
// user-service.ts
// api-client.ts
// utils/date-helpers.ts
```

### Code Organization

```typescript
// ✅ Import organization
// 1. External libraries
import { z } from 'zod';
import { ofetch } from 'ofetch';

// 2. Internal type imports
import type { User, CreateUserInput, ApiResponse } from './types';
import type { DatabaseConfig from './config';

// 3. Internal value imports
import { validateEmail, hashPassword } from './utils';
import { DatabaseConnection } from './database';

// ✅ Export organization
export type { User, CreateUserInput, UpdateUserInput };
export { UserService, UserRepository };
export { validateUser, createUser } from './operations';
```

## Performance and Optimization

### Type Computation Optimization

```typescript
// ✅ Avoid deep recursive types that can slow compilation
type SafeDeepPartial<T, Depth extends number = 5> = Depth extends 0
  ? T
  : {
      [P in keyof T]?: T[P] extends object
        ? SafeDeepPartial<T[P], [-1, 0, 1, 2, 3, 4][Depth]>
        : T[P];
    };

// ✅ Use const assertions for better inference
const HTTP_METHODS = ["GET", "POST", "PUT", "DELETE", "PATCH"] as const;
type HttpMethod = (typeof HTTP_METHODS)[number];

const USER_ROLES = {
  ADMIN: "admin",
  EDITOR: "editor",
  VIEWER: "viewer",
} as const;
type UserRole = (typeof USER_ROLES)[keyof typeof USER_ROLES];
```

## Testing Types

### Test Utilities and Mocks

```typescript
// ✅ Test-specific types
interface TestContext {
  mockDatabase: MockDatabase;
  mockApiClient: MockApiClient;
  testUser: User;
}

type MockedFunction<TFunc extends (...args: any[]) => any> =
  jest.MockedFunction<TFunc>;

// ✅ Test factory functions
function createTestUser(overrides?: Partial<User>): User {
  return {
    id: createUserId("test-user-id"),
    username: "testuser",
    email: createEmail("test@example.com"),
    firstName: "Test",
    lastName: "User",
    status: "active",
    createdAt: new Date(),
    updatedAt: new Date(),
    ...overrides,
  };
}

function createMockApiResponse<TData>(
  data: TData,
  overrides?: Partial<ApiResponse<TData>>
): ApiResponse<TData> {
  return {
    success: true,
    data,
    message: "Success",
    timestamp: new Date().toISOString(),
    ...overrides,
  };
}
```

## Documentation Standards

### JSDoc Comments

````typescript
/**
 * Creates a new user account with the provided information.
 *
 * Validates the input data, hashes the password, and stores the user
 * in the database. Sends a welcome email upon successful creation.
 *
 * @param input - The user creation data including username, email, and password
 * @param options - Additional options for user creation behavior
 * @returns Promise that resolves to the created user data (without password)
 *
 * @throws {ValidationError} When input data is invalid
 * @throws {DuplicateEmailError} When email already exists in the system
 * @throws {DatabaseError} When database operation fails
 *
 * @example
 * ```typescript
 * const newUser = await createUser({
 *   username: 'johndoe',
 *   email: 'john@example.com',
 *   password: 'securePassword123',
 *   firstName: 'John',
 *   lastName: 'Doe'
 * }, {
 *   sendWelcomeEmail: true,
 *   validateEmailDomain: true
 * });
 *
 * console.log(`Created user: ${newUser.username}`);
 * ```
 */
async function createUser(
  input: CreateUserInput,
  options: CreateUserOptions = {}
): Promise<User> {
  // Implementation here
}

/**
 * Configuration interface for the API client.
 *
 * @interface ApiClientConfig
 * @property baseUrl - The base URL for all API requests
 * @property timeout - Request timeout in milliseconds (default: 30000)
 * @property retries - Number of retry attempts for failed requests (default: 3)
 * @property apiKey - Authentication API key for requests
 */
interface ApiClientConfig {
  /** The base URL for all API requests */
  baseUrl: string;

  /** Request timeout in milliseconds */
  timeout?: number;

  /** Number of retry attempts for failed requests */
  retries?: number;

  /** Authentication API key for requests */
  apiKey: string;
}
````

## Project Configuration

### TypeScript Configuration

```json
// tsconfig.json
{
  "compilerOptions": {
    // Strict type checking
    "strict": true,
    "noUncheckedIndexedAccess": true,
    "exactOptionalPropertyTypes": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,

    // Module resolution
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,

    // JavaScript support
    "allowJs": true,
    "checkJs": false,

    // Emit settings
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,

    // Advanced options
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "**/*.test.ts"]
}
```

### Biome Configuration

```json
// biome.json
{
  "linter": {
    "enabled": true,
    "rules": {
      "suspicious": {
        "noExplicitAny": "error",
        "noUnsafeDeclarationMerging": "error"
      },
      "style": {
        "noNonNullAssertion": "error",
        "useImportType": "error"
      },
      "correctness": {
        "noUndeclaredVariables": "error",
        "noUnusedVariables": "error"
      }
    }
  },
  "formatter": {
    "enabled": true,
    "indentStyle": "space",
    "indentSize": 2,
    "lineWidth": 100,
    "quoteStyle": "double"
  },
  "organizeImports": {
    "enabled": true
  },
  "files": {
    "include": ["src/**/*.ts", "src/**/*.tsx"],
    "ignore": ["node_modules/**", "dist/**", "**/*.d.ts"]
  }
}
```

## Summary

**Type safety is paramount.** Never use `any` types or type assertions to "solve" type errors. Instead, invest time in properly defining types, using type guards for safe type narrowing, and leveraging TypeScript's powerful type system to catch errors at compile time rather than runtime.

**Key mantras to remember:**

- If you need `any`, you probably need `unknown` + type guards
- If you need `as`, you probably need a type guard function
- If you need `!`, you probably need an explicit null check
- Every function parameter and return value should have explicit types
- Use `import type` for type-only imports
- Leverage the Result pattern for error handling
- Always enable strict mode and use Biome for consistent code quality

Follow these standards religiously to build robust, maintainable TypeScript applications that leverage the full power of the type system.
